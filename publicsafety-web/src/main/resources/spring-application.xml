<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd   
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-3.0.xsd  
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
    http://www.springframework.org/schema/task 
    http://www.springframework.org/schema/task/spring-task-3.0.xsd     
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!-- 定时器开关 开始 -->
	<task:annotation-driven />
	<!-- 定时器开关 结束 -->
	<!-- 标注类型 的事务配置 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 读取资源文件 -->
	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" >
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:config.properties</value>
				<value>classpath:hsf.properties</value>
			</list>
    	</property>
	</bean>
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
	</bean>
	
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
		<!-- 自动匹配Mapper映射文件 -->
		<property name="mapperLocations" value="classpath:mappings/**/*-mapper.xml"/>
		<property name="typeAliasesPackage" value="com.hisign.publicsafety.entity"/>
		
	</bean>
	<!-- 通过扫描的模式，扫描目录在com.hisign.publicsafety.mapper目录下，所有的mapper都继承SqlMapper接口的接口， 这样一个bean就可以了 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.hisign.publicsafety.mapper" />
	</bean>
	
	<!-- 事务配置 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="logHandlerAOP" class="com.hisign.publicsafety.logAop.LogAopAction"></bean> 
	<aop:config proxy-target-class="true">
	    <aop:aspect id="logAspect" ref="logHandlerAOP"> 
		    <aop:pointcut id="logPointCut" expression="execution(* com.hisign.publicsafety.service.impl..*.* (..))" /> 
		    <aop:around method="logAll" pointcut-ref="logPointCut" />
		</aop:aspect>
	</aop:config>

	<!-- 使用Spring组件扫描的方式来实现自动注入bean -->
	<context:component-scan base-package="com.hisign.publicsafety.service" />
	<!-- <context:component-scan base-package="com.hisign.publicsafety.log"/> -->
	<context:component-scan base-package="com.hisign.publicsafety.security" />
	<!-- 隐式地向 Spring 容器注册 -->
	<context:annotation-config />
	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
	</bean>
	<bean id="mapper" class="org.dozer.spring.DozerBeanMapperFactoryBean">
		<property name="mappingFiles">
			<list>
				<value>classpath*:dozer/mapping/*Mapper.xml</value>
			</list>
		</property>
	</bean>
	<bean id="caches" class="com.hisign.publicsafety.common.SystemCaches" scope="singleton">
		<constructor-arg><value>${CACHE_MAXNUM}</value></constructor-arg>
		<constructor-arg><value>${CACHE_EXPIRE}</value></constructor-arg>
	</bean>
	
	<!-- dio2oService为本地测试使用，请阿里替换正式服务 -->
	<bean id="dio2oService" class="com.alibaba.dio2o.service.impl.Dio2oServiceImplT"></bean>
	<!--
	<bean id="dio2oService" class="com.taobao.hsf.app.spring.util.HSFSpringConsumerBean" init-method="init">
		<property name="interfaceName" value="com.alibaba.dio2o.service.Dio2oService" />
		<property name="version" value="${dio2o.version}" />
	</bean>-->
</beans>